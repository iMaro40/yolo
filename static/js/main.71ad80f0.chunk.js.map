{"version":3,"sources":["tasks.js","App.js","serviceWorker.js","index.js"],"names":["Task","id","this","props","task","_id","name","done","notes","priority","createdAt","updatedAt","react_default","a","createElement","className","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","tasks","_this2","fetch","then","result","json","data","setState","_this3","results","method","headers","Accept","Content-Type","body","JSON","stringify","firstParam","secondParam","map","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNA4CeA,0LAxCX,IAAMC,EAAKC,KAAKC,MAAMC,KAAKC,IACrBC,EAAOJ,KAAKC,MAAMC,KAAKE,KACvBC,EAAOL,KAAKC,MAAMC,KAAKG,KACvBC,EAAON,KAAKC,MAAMC,KAAKI,MACvBC,EAAWP,KAAKC,MAAMC,KAAKK,SAC3BC,EAAYR,KAAKC,MAAMC,KAAKM,UAC5BC,EAAYT,KAAKC,MAAMC,KAAKO,UAElC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,MAAhB,cACYd,GAEZW,EAAAC,EAAAC,cAAA,OAAKC,UAAW,QAAhB,cACYT,GAEZM,EAAAC,EAAAC,cAAA,OAAKC,UAAY,QAAjB,WACSR,GAETK,EAAAC,EAAAC,cAAA,OAAKC,UAAY,SAAjB,UACQP,GAERI,EAAAC,EAAAC,cAAA,OAAKC,UAAW,YAAhB,aACWN,GAEXG,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aAAjB,eACaL,GAEbE,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aAAjB,eACaJ,GAEbC,EAAAC,EAAAC,cAAA,mBAjCWE,IAAMC,YC0EVC,cAxEb,SAAAA,EAAaf,GAAM,IAAAgB,EAAAC,OAAAC,EAAA,EAAAD,CAAAlB,KAAAgB,GAAA,OACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAtB,KAAMC,KAEDsB,MAAO,CACVC,MAAM,IAJSP,4EAQP,IAAAQ,EAAAzB,KAEV0B,MADW,sDAERC,KAAK,SAAAC,GACJ,OAAOA,EAAOC,SAEfF,KAAK,SAACG,GACLL,EAAKM,SAAS,CACZP,MAAMM,kDAOK,IAAAE,EAAAhC,KAEjB0B,MADW,2CAERC,KAAK,SAAAM,GACJ,OAAOA,EAAQJ,SAEhBF,KAAK,SAACG,GACLE,EAAKD,SAAS,CACZP,MAAMM,uCAOZJ,MAAM,2CAA4C,CACpDQ,OAAQ,OACRC,QAAS,CACPC,OAAU,mBACVC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,WAAY,YACZC,YAAa,sDAQb,OACEhC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,8CAGFF,EAAAC,EAAAC,cAAA,OAAKC,UAAW,SACbb,KAAKuB,MAAMC,MAAMmB,IAAI,SAACzC,GACrB,OAAOQ,EAAAC,EAAAC,cAACY,EAAD,CAAMtB,KAAMA,eA/Dba,aCSE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.71ad80f0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Task extends React.Component{\r\n  render(){\r\n    const id = this.props.task._id;\r\n    const name = this.props.task.name;\r\n    const done = this.props.task.done;\r\n    const notes =this.props.task.notes;\r\n    const priority = this.props.task.priority;\r\n    const createdAt = this.props.task.createdAt;\r\n    const updatedAt = this.props.task.updatedAt;\r\n    \r\n    return(\r\n      <div className=\"task\">\r\n        <div className =\"id\">\r\n        ID Number: {id}\r\n        </div>\r\n        <div className =\"name\">\r\n        Task name: {name}\r\n        </div>\r\n        <div className = \"done\">\r\n        Status: {done}\r\n        </div>\r\n        <div className = \"notes\">\r\n        Notes: {notes}\r\n        </div>\r\n        <div className =\"priority\">\r\n        Priority: {priority}\r\n        </div>\r\n        <div className = \"createdAt\">\r\n        Created at: {createdAt}\r\n        </div>\r\n        <div className = \"updatedAt\">\r\n        Updated at: {updatedAt}\r\n        </div>\r\n        <br></br>\r\n      </div>\r\n\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default Task;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Task from './tasks';\nclass App extends Component {\n  constructor (props){\n    super(props);\n    let which_tasks =\"ALL\"\n    this.state ={\n      tasks:[]\n    };\n  }\n\n  done_tasks(){\n    const url =\"http://devcamp1819b.herokuapp.com/tasks/tasks/done\"\n    fetch(url)\n      .then(result=>{\n        return result.json();\n      })\n      .then((data)=>{\n        this.setState({\n          tasks:data\n        });\n\n  })\n\n}\n\n  componentDidMount(){\n    const url =\"http://devcamp1819b.herokuapp.com/tasks\"\n    fetch(url)\n      .then(results=>{\n        return results.json();\n      })\n      .then((data)=>{\n        this.setState({\n          tasks:data\n        });\n      })\n\n  }\n\n  create(){\n    fetch('http://devcamp1819b.herokuapp.com/tasks/', {\n  method: 'POST',\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    firstParam: 'yourValue',\n    secondParam: 'yourOtherValue',\n  })\n})\n\n\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <h1> I really did try my best guys </h1>\n        </div>\n\n        <div className =\"tasks\">\n          {this.state.tasks.map((task)=>{\n            return <Task task={task}/>\n          })}\n        </div>\n\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}